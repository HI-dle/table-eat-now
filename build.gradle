plugins {
	id 'java'
	id 'jacoco'
    id "org.sonarqube" version "6.0.1.5171" apply false
}

group = 'idle.table.eat.now'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

ext {
    excludePatterns = [
        "**/*Application*",
        "**/Q*",
        "**/global/**",
        "**/config/**",
        "**/exception/**",
        "**/dto/**",
        "**/*Filter*",
        "**/*Handler*",
        "**/security/**",
        "**/*Entity*",
        "**/type/*",
        "**/resources/**",
        "**/infrastructure/**",
        "**/projection/**",
        "**/command/**",
        "**/common/**",
        "**/domain/**",
        "**/gateway/**",
        "**/util*/**"
    ]

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

    excludePatterns += Qdomains
}


def jacocoDir = layout.buildDirectory.dir("reports/")

jacocoTestReport {
    dependsOn test

    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(true)
        html.destination jacocoDir.get().file("jacoco/index.html").asFile
        xml.destination jacocoDir.get().file("jacoco/index.xml").asFile
        csv.destination jacocoDir.get().file("jacoco/index.csv").asFile
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: rootProject.ext.excludePatterns)
                })
        )
    }
}


subprojects {
    group = 'table.eat.now'
    version = '0.0.1-SNAPSHOT'

    java {
        sourceCompatibility = '17'
    }

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'jacoco' // 플러그인
    apply plugin: 'org.sonarqube' // 플러그인

    test {
        finalizedBy jacocoTestReport // test 후 jacoco 실행
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }

        afterEvaluate {
            classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: rootProject.ext.excludePatterns)
                })
            )
        }
    }
}
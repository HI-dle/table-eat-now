plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'table.eat.now'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.0")
	set('querydslVersion', "5.0.0")
}

dependencies {
    implementation project(':common')
	implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	//email
	implementation 'org.springframework.boot:spring-boot-starter-mail'

//	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
//	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.github.openfeign:feign-micrometer'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	//DB
	runtimeOnly 'org.postgresql:postgresql'
	testRuntimeOnly 'com.h2database:h2'

	//kafka
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation 'org.springframework.kafka:spring-kafka-test'

	//wireMock 의존성
	testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock'

	//redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

//	implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'

	// Jackson Databind 의존성 (JSON 직렬화 및 역직렬화)
//	implementation 'com.fasterxml.jackson.core:jackson-databind'

	// 추가적으로 Jackson2 JSON 인코더/디코더 설정이 필요한 경우
//	implementation 'org.springframework.boot:spring-boot-starter-json'

	//webclient
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	//prometheus
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'


	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//DOCS
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.4'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

processResources.dependsOn('copyEnv')

tasks.register('copyEnv', Copy) {

	['../', './'].each { dest ->
		copy {
			from '../ten-private/.env.notification'
			into dest
		}
	}
}
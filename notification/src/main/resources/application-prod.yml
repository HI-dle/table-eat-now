server:
  port: 8089

spring:
  config:
    import: optional:file:.env.notification[.properties]
  application:
    name: notification
  datasource:
    url: ${PROD_DB_URL}
    username: ${PROD_DB_USERNAME}
    password: ${PROD_DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 30
    show-sql: true
  data:
    redis:
      host: ${PROD_REDIS_HOST}
      port: ${PROD_REDIS_PORT}
      username: ${PROD_REDIS_USERNAME}
      password: ${PROD_REDIS_PASSWORD}
  kafka:
    bootstrap-servers: ${PROD_KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      auto-offset-reset: earliest
      enable-auto-commit: false
      fetch-min-bytes: 1024
      fetch-max-wait-ms: 500
      max-poll-records: 500
      properties:
        spring.json.trusted.packages: "*"
kafka:
  topic:
    promotion:
      partitions: 3
      replicas: 3
      min-insync-replicas: 2

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL_USERNAME}
    password: ${EMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
slack:
  webhook-url: ${SLACK_WEBHOOK_URL}

eureka:
  client:
    register-with-eureka: true  # Eureka Server에 등록
    fetch-registry: true  # Eureka Server에서 서비스 목록 가져오기
    service-url:
      defaultZone: ${PROD_EUREKA_SERVICE_URL}
  instance:
    ip-address: ${PROD_EC2_ADDRESS}
    prefer-ip-address: true  # 서비스 등록 시 IP 주소 사용

management:
  endpoints:
    web:
      exposure:
        include: prometheus, health, info
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: ${PROD_ZIPKIN_ENDPOINT}

notification:
  delay-queue-key: notification:delay-queue

scheduler:
  max-dispatch-count: 1000

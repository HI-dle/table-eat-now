name: CI - docker image build and ecr push
on:
  push:
    branches:
      - main
jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect changed modules
        id: set-modules
        run: |
          git fetch origin develop
          changed_files=$(git diff --name-only origin/develop...${{ github.sha }})
          changed_modules=$(echo "$changed_files" | cut -d/ -f1 | sort -u)
          
          if echo "$changed_modules" | grep -q '^common$'; then
            modules=$(find . -maxdepth 1 -type d ! -name '.' | \
              sed 's|^\./||' | \
              grep -Ev '^(\.git|\.github|gradle|ten-private)$' | \
              jq -R -s -c 'split("\n") | map(select(length > 0))')

            echo "modules=$modules" >> "$GITHUB_OUTPUT"
          else
            excluded_dirs="\.github|gradle|ten-private|common"
            pattern=$(find . -maxdepth 1 -type d ! -name '.' \
              | sed 's|^\./||' \
              | grep -vE "^($excluded_dirs)$" \
              | paste -sd'|' - \
              | awk '{ print "^(" $0 ")$" }')
          
            modules=$(echo "$changed_modules" | grep -E "$pattern" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "modules=$modules" >> "$GITHUB_OUTPUT"
          fi
  build-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.modules != '[]' && needs.detect-changes.outputs.modules != '' }}
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.modules) }}
      fail-fast: false  # 첫 번째 실패가 발생해도 나머지 작업들은 계속 진행됨
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true
          fetch-depth: 0  # Shallow clones should be disabled

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image to Amazon ECR
        run: |
          REGION="ap-northeast-2"
          ECR_REPOSITORY="hidle-ecr"
          IMAGE_TAG=${{ matrix.module }}
          
          docker build -t ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG -f ${{ matrix.module }}/Dockerfile . 
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG


